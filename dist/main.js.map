{"version":3,"sources":["../src/main.js"],"sourcesContent":["function clamp(lowerBound, upperBound, value) {\r\n  if (typeof value === \"undefined\") {\r\n    return function (value) {\r\n      return Math.min(Math.max(value, lowerBound), upperBound);\r\n    };\r\n  } else {\r\n    return Math.min(Math.max(value, lowerBound), upperBound);\r\n  }\r\n}\r\n\r\nfunction drag_y(el, val = newY) {\r\n  el.style.top = `${val}px`;\r\n}\r\nfunction drag_x(el, val = newY) {\r\n  el.style.left = `${val}px`;\r\n}\r\n\r\nfunction getElement(selectorOrElement) {\r\n  if (typeof selectorOrElement === \"string\") {\r\n    // If it's a string, assume it's a CSS selector\r\n    return document.querySelector(selectorOrElement);\r\n  } else if (selectorOrElement instanceof HTMLElement) {\r\n    // Otherwise, assume it's already a reference to a DOM element or another JS variable\r\n    return selectorOrElement;\r\n  }\r\n}\r\n\r\nconst draggableObjects = [];\r\n\r\nconst Drag = {\r\n  init: function (selector, options) {\r\n    const draggable = getElement(selector);\r\n\r\n    draggable.style.userSelect = \"none\";\r\n    draggable.style.position = \"absolute\";\r\n    draggable.style.cursor = \"grab\";\r\n\r\n    draggableObjects.push(draggable);\r\n\r\n    let isDragging = false;\r\n    let isClick = false;\r\n    let startMouseX = 0;\r\n    let startMouseY = 0;\r\n    let offsetX = 0;\r\n    let offsetY = 0;\r\n    let threshold = 5;\r\n\r\n    let type = options.type || \"xy\"; // I think these vars are not needed here\r\n    let bounds = options.bounds || null; // I think these vars are not needed\r\n    let onDragStart = options.onDragStart || function () {};\r\n    let onDragEnd = options.onDragEnd || function () {};\r\n    let onClick = options.onClick || function () {};\r\n    let onDrag = options.onDrag || function () {};\r\n    let originalZIndex = 1; // Initial z-index value\r\n\r\n    var newX, newY;\r\n\r\n    setupListeners(draggable, options);\r\n\r\n    function setupListeners(draggable, options) {\r\n      draggable.addEventListener(\"mousedown\", (e) =>\r\n        handleMouseDown(e, draggable)\r\n      );\r\n      document.addEventListener(\"mouseup\", () => handleMouseUp());\r\n      draggable.addEventListener(\"click\", () => handleObjectClick());\r\n\r\n      // Add other event listeners or options as needed\r\n    }\r\n\r\n    function handleMouseDown(e, el) {\r\n      el.style.isolation = \"isolate\";\r\n\r\n      //change mouse icon to grabbing\r\n      document.body.style.cursor = \"grabbing\";\r\n      draggable.style.cursor = \"grabbing\";\r\n\r\n      startMouseX = e.clientX;\r\n      startMouseY = e.clientY;\r\n\r\n      offsetX = e.clientX - el.offsetLeft;\r\n      offsetY = e.clientY - el.offsetTop;\r\n\r\n      el.style.zIndex = getHighestZIndex() + 1; // Bring to the top\r\n\r\n      originalZIndex = parseInt(getComputedStyle(el).zIndex) || 1;\r\n\r\n      document.addEventListener(\"mousemove\", move);\r\n    }\r\n\r\n    function handleMouseUp() {\r\n      //remove event listner to stop the dragging after mouse is not clicked anymore\r\n      document.removeEventListener(\"mousemove\", move);\r\n\r\n      //change mouse icon back to grab\r\n      document.body.style.cursor = \"default\";\r\n      draggable.style.cursor = \"grab\";\r\n\r\n      //click or drag end function?\r\n      if (!isDragging) {\r\n        isClick = true;\r\n      } else {\r\n        isDragging = false;\r\n        onDragEnd();\r\n      }\r\n    }\r\n\r\n    function handleObjectClick() {\r\n      if (isClick && !isDragging) {\r\n        if (\r\n          parseInt(getComputedStyle(draggable).zIndex) === getHighestZIndex()\r\n        ) {\r\n          // Clicked on the already top element, set it back to original z-index\r\n          draggable.style.zIndex = originalZIndex;\r\n        } else {\r\n          // Clicked on a different element, bring it to the top\r\n          draggable.style.zIndex = getHighestZIndex() + 1;\r\n        }\r\n        isClick = false;\r\n        onClick();\r\n      }\r\n    }\r\n\r\n    function move(e) {\r\n      const deltaX = Math.abs(e.clientX - startMouseX);\r\n      const deltaY = Math.abs(e.clientY - startMouseY);\r\n\r\n      if (!isDragging && (deltaX > threshold || deltaY > threshold)) {\r\n        isDragging = true;\r\n        isClick = false;\r\n        onDragStart();\r\n      }\r\n\r\n      if (isDragging) {\r\n        onDrag();\r\n\r\n        newX = e.clientX - offsetX;\r\n        newY = e.clientY - offsetY;\r\n\r\n        if (options && options.type === \"x\") {\r\n          // For 'x' type, only allow horizontal dragging (along the x-axis)\r\n          newX = e.clientX - offsetX;\r\n          newY = draggable.offsetTop;\r\n        } else if (options && options.type === \"y\") {\r\n          // For 'y' type, only allow vertical dragging (along the y-axis)\r\n          newX = draggable.offsetLeft;\r\n          newY = e.clientY - offsetY;\r\n        } else {\r\n          // For any other type or no type specified, allow dragging in both 'x' and 'y' axes\r\n          newX = e.clientX - offsetX;\r\n          newY = e.clientY - offsetY;\r\n        }\r\n\r\n        if (options && options.bounds) {\r\n          let bounding_box = document.querySelector(options.bounds);\r\n\r\n          if (bounding_box instanceof HTMLElement) {\r\n            const computedStyles = window.getComputedStyle(bounding_box);\r\n            const position = computedStyles.getPropertyValue(\"position\");\r\n\r\n            if (position === \"relative\") {\r\n              // If position is relative, calculate offsets relative to the bounding box itself\r\n              minX = 0; // Relative to the bounding box\r\n              minY = 0; // Relative to the bounding box\r\n            } else {\r\n              // If position is not relative, use offsetLeft and offsetTop as usual\r\n              minX = bounding_box.offsetLeft;\r\n              minY = bounding_box.offsetTop;\r\n            }\r\n\r\n            const bound_width = parseFloat(\r\n              computedStyles.getPropertyValue(\"width\")\r\n            );\r\n            const bound_height = parseFloat(\r\n              computedStyles.getPropertyValue(\"height\")\r\n            );\r\n\r\n            maxX = minX + bound_width - draggable.clientWidth;\r\n            maxY = minY + bound_height - draggable.clientHeight;\r\n\r\n            // Clamp newX and newY between minX, minY, maxX, maxY as needed\r\n            newX = clamp(minX, maxX, newX);\r\n            newY = clamp(minY, maxY, newY);\r\n          } else {\r\n            // The variable is not an HTML element\r\n            console.log(\"could not find bounding element\");\r\n\r\n            newX = e.clientX - offsetX;\r\n            newY = e.clientY - offsetY;\r\n          }\r\n        }\r\n\r\n        if (options && options.type === \"x\") {\r\n          drag_x(draggable, newX);\r\n        } else if (options && options.type === \"y\") {\r\n          drag_y(draggable, newY);\r\n        } else {\r\n          drag_x(draggable, newX);\r\n          drag_y(draggable, newY);\r\n        }\r\n      }\r\n    }\r\n\r\n    function getHighestZIndex() {\r\n      let highestZIndex = 0;\r\n\r\n      draggableObjects.forEach((element) => {\r\n        const zIndex = parseInt(getComputedStyle(element).zIndex) || 0;\r\n        highestZIndex = Math.max(highestZIndex, zIndex);\r\n      });\r\n\r\n      return highestZIndex;\r\n    }\r\n  },\r\n};\r\n\r\n\r\nexport { Drag };"],"mappings":"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","names":["value","newY","draggable","options"]}